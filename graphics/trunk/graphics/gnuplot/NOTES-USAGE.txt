### Gnuplot PlotItems:
###   Data(array1)
###   File('filename')
###   Func('exp(4.0 * sin(x))')
###   GridData(m, x, y):
###       m = data to plot in 2-d array with dimensions (numx,numy)
###       x = 1-d array with dimensions numx
###       y = 1-d array with dimensions numy
### Gnuplot Plots:
###   g.plot(Gnuplot.Data(x,y))
###   g.splot(Gnuplot.GridData(data,xvals,yvals))


# build 1-D lists: x, y, z
>>> from numarray import *
>>> x = []
>>> for i in range(21): x.append(i*pi/10)
... 
>>> x
[0.0, 0.31415926535897931, 0.62831853071795862, 0.94247779607693793, 1.2566370614359172, 1.5707963267948966, 1.8849555921538759, 2.1991148575128552, 2.5132741228718345, 2.8274333882308138, 3.1415926535897931, 3.455751918948772, 3.7699111843077517, 4.0840704496667311, 4.3982297150257104, 4.7123889803846897, 5.026548245743669, 5.3407075111026483, 5.6548667764616276, 5.9690260418206069, 6.2831853071795862]
>>> y = sin(x)
>>> z = array([x,y]) #??? better is to make z = f(x,y)


# instantiate gnuplot
>>> import Gnuplot
>>> g = Gnuplot.Gnuplot()

# plot x(n) & y(n)
>>> g.plot(x,y)

# plot y(x)
>>> g.plot(Gnuplot.Data(x,y))

# splot z(n,f(x,y))
>>> g.splot(Gnuplot.GridData(z))

#----------------------------------

>>> x = Numeric.arange(100)/5. - 10.
>>> y = Numeric.cos(x)
>>> z = Numeric.sin(x)
>>> d = Numeric.transpose((x,y,z))
>>> g.plot(Gnuplot.funcutils.compute_Data(x, lambda x: math.cos(x), inline=0))
>>> g.plot('sin(x)', d)
>>> g.splot(d)

>>> x = arange(35)/2.0
>>> y = arange(30)/10.0 - 1.5
>>> xm = x[:,NewAxis]
>>> ym = y[NewAxis,:]
>>> m = (Numeric.sin(xm) + 0.1*xm) - ym**2
>>> g.splot(Gnuplot.GridData(m,x,y, binary=0, inline=0))
>>> g.splot(Gnuplot.funcutils.compute_GridData(
            x,y, lambda x,y: math.sin(x) + 0.1*x - y**2,
            ))

#----------------------------------

>>> from graphics.gnuplot import gnuplot
>>> gp1 = gnuplot()
gnuplot> set terminal x11
>>> gp1.plot(gp1.Func('sin(x)',with='impulses'))
gnuplot> plot sin(x) with impulses
>>> gp1.replot(gp1.Func('cos(x)'))
gnuplot> plot sin(x) with impulses, cos(x) 
>>> gp1.itemlist.pop(0)
<Gnuplot.PlotItems.Func instance at 0x4064f3ac>
>>> gp1.refresh()
gnuplot> plot cos(x) 
