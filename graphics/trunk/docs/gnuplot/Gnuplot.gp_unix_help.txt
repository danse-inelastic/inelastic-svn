Help on module Gnuplot.gp_unix in Gnuplot:

NAME
    Gnuplot.gp_unix - gp_unix -- an interface to gnuplot used for unix platforms.

FILE
    /usr/local/lib/python2.3/site-packages/Gnuplot/gp_unix.py

DESCRIPTION
    This file implements a low-level interface to a gnuplot program for a
    unix platform (actually it is used for any non-Windows, non-Mac
    system).  This file should be imported through gp.py, which in turn
    should be imported via 'import Gnuplot' rather than these low-level
    interfaces.

CLASSES
    GnuplotOpts
    GnuplotProcess
    
    class GnuplotOpts
     |  The configuration options for gnuplot on generic platforms.
     |  
     |  Store the options in a class to make them easy to import and
     |  modify en masse.  If you want to modify the options from the
     |  command line or within a running program, do something like the
     |  following::
     |  
     |      import Gnuplot
     |      Gnuplot.GnuplotOpts.gnuplot_command = '/bin/mygnuplot'
     |  
     |  Data and other attributes defined here:
     |  
     |  default_lpr = '| lpr'
     |  
     |  default_term = 'x11'
     |  
     |  gnuplot_command = 'gnuplot'
     |  
     |  prefer_enhanced_postscript = 1
     |  
     |  prefer_fifo_data = 1
     |  
     |  prefer_inline_data = 0
     |  
     |  prefer_persist = 0
     |  
     |  recognizes_binary_splot = 1
     |  
     |  recognizes_persist = None
     |  
     |  support_fifo = 1
    
    class GnuplotProcess
     |  Unsophisticated interface to a running gnuplot program.
     |  
     |  This represents a running gnuplot program and the means to
     |  communicate with it at a primitive level (i.e., pass it commands
     |  or data).  When the object is destroyed, the gnuplot program exits
     |  (unless the 'persist' option was set).  The communication is
     |  one-way; gnuplot's text output just goes to stdout with no attempt
     |  to check it for error messages.
     |  
     |  Members:
     |  
     |      'gnuplot' -- the pipe to the gnuplot command.
     |  
     |  Methods:
     |  
     |      '__init__' -- start up the program.
     |  
     |      '__call__' -- pass an arbitrary string to the gnuplot program,
     |          followed by a newline.
     |  
     |      'write' -- pass an arbitrary string to the gnuplot program.
     |  
     |      'flush' -- cause pending output to be written immediately.
     |  
     |      'close' -- close the connection to gnuplot.
     |  
     |  Methods defined here:
     |  
     |  __call__(self, s)
     |      Send a command string to gnuplot, followed by newline.
     |  
     |  __del__(self)
     |  
     |  __init__(self, persist=None)
     |      Start a gnuplot process.
     |      
     |      Create a 'GnuplotProcess' object.  This starts a gnuplot
     |      program and prepares to write commands to it.
     |      
     |      Keyword arguments:
     |      
     |        'persist=1' -- start gnuplot with the '-persist' option,
     |            (which leaves the plot window on the screen even after
     |            the gnuplot program ends, and creates a new plot window
     |            each time the terminal type is set to 'x11').  This
     |            option is not available on older versions of gnuplot.
     |  
     |  close(self)

FUNCTIONS
    popen(...)
        popen(command [, mode='r' [, bufsize]]) -> pipe
        
        Open a pipe to/from a command returning a file object.
    
    test_persist()
        Determine whether gnuplot recognizes the option '-persist'.
        
        If the configuration variable 'recognizes_persist' is set (i.e.,
        to something other than 'None'), return that value.  Otherwise,
        try to determine whether the installed version of gnuplot
        recognizes the -persist option.  (If it doesn't, it should emit an
        error message with '-persist' in the first line.)  Then set
        'recognizes_persist' accordingly for future reference.

DATA
    __cvs_version__ = '$Revision: 2.7 $'


