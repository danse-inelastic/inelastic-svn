# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base


class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        engine = inv.str('engine', default='vasp')
        engine.validator=inv.choice(['vasp', 'ab init'])
        engine.meta['tip'] = 'ab initio engine'
        xcFunctional = inv.str('xcFunctional', default='PAW-PBE')
        xcFunctional.validator=inv.choice(['PAW-PBE', 'PAW-GGA', 'LDA'])
        xcFunctional.meta['tip'] = 'exchange correlation functional'
        kineticEnergyCutoff = inv.float('kineticEnergyCutoff', default=140.0)
        kineticEnergyCutoff.meta['tip'] = 'Kinetic energy cutoff'
        monkhorstPackMesh = inv.list('monkhorstPackMesh', default=[1,1,1])
        monkhorstPackMesh.meta['tip'] = 'Monkhorst pack mesh'
        supercell = inv.list('supercell', default=[1,1,1])
        supercell.meta['tip'] = 'Supercell for phonon calculation'
        displacementAmplitude = inv.float('displacementAmplitude', default=0.01)
        displacementAmplitude.meta['tip'] = 'Displacement amplitude'      
        qGrid = inv.list('qGrid', default=[1,1,1])
        qGrid.meta['tip'] = 'Q grid for phonon calculation'         

    def expand(self, form):
        '''expand an existing form with fields from this component'''
              
#        for property in self.parameters:
#        
#            value = getattr( record, property )
#            exec 'self.inventory.%s = value' % property
#            value = tostr( getattr(self.inventory, property) )
#            
#            field = form.text(
#                id = property,
#                name='%s.%s' % (prefix, property),
#                label=property,
#                value = value)
#            
#            descriptor = getattr(self.Inventory, property)
#            tip = descriptor.meta.get('tip')
#            if tip:
#                field.help = tip
        
        p = form.paragraph()
        p.text = ['<h2> VASP Engine</h2>']

#drop down menu for abinitio engine: [vasp, (abinit)]
        choices=['vasp','abinit (not completely functional)']
        entries=enumerate(choices)

        eng=str(self.inventory.engine)
        engine = form.selector(id='selector1',
                name = 'abInitioHarmonic.engine',
                entries = entries,
                label = 'Electronic Structure Engine',
                selected = eng)    

# drop down menu XC-functional type: [PAW-PBE, PAW-GGA, LDA]
        choices=['PAW-PBE', 'PAW-GGA', 'LDA']
        entries=enumerate(choices)

        xcFunctional = form.selector(id='selector2',
            name = 'abInitioHarmonic.xcFunctional',
            entries = entries,
            label = 'Exchange correlation functional',
            selected = self.inventory.xcFunctional,
            )
        
        kineticEnergyCutoff = form.text(
                id = 'text1',
                name='abInitioHarmonic.kineticEnergyCutoff',
                label='Kinetic energy cutoff (eV)',
                value = str(self.inventory.kineticEnergyCutoff))
        
        nKx = form.text(
                id = 'text2',
                name='abInitioHarmonic.nKx',
                label = 'Number of k-points (x-direction)',
                value = str(self.inventory.monkhorstPackMesh[0]))  
        nKy = form.text(
                id = 'text3',
                name='abInitioHarmonic.nKy',
                label = 'Number of k-points (y-direction)',
                value = str(self.inventory.monkhorstPackMesh[1]))       
        nKz = form.text(
                id = 'text4',
                name='abInitioHarmonic.nKz',
                label = 'Number of k-points (z-direction)',
                value = str(self.inventory.monkhorstPackMesh[2]))     

        p = form.paragraph()
        p.text = ['<h2>Phonons</h2>']

        supercellx = form.text(
                id = 'text5',
                name='abInitioHarmonic.supercellx',
                label='Supercell expansion (x-direction)',
                value = str(self.inventory.supercell[0]))  
        supercelly = form.text(
                id = 'text6',
                name='abInitioHarmonic.supercelly',
                label='Supercell expansion (y-direction)',
                value = str(self.inventory.supercell[1]))       
        supercellz = form.text(
                id = 'text7',
                name='abInitioHarmonic.supercellz',
                label='Supercell expansion (z-direction)',
                value = str(self.inventory.supercell[2]))   
        displacementAmplitude = form.text(
                id = 'text8',
                name='abInitioHarmonic.displacementAmplitude',
                label='Displacement amplitude',
                value = str(self.inventory.displacementAmplitude)) 
        Qx = form.text(
                id = 'text9',
                name='abInitioHarmonic.Qx',
                label='Phonon Q-points (x-direction)',
                value = str(self.inventory.qGrid[0]))  
        Qy = form.text(
                id = 'text10',
                name='abInitioHarmonic.Qy',
                label='Phonon Q-points (y-direction)',
                value = str(self.inventory.qGrid[1]))       
        Qz = form.text(
                id = 'text11',
                name='abInitioHarmonic.Qz',
                label='Phonon Q-points (z-direction)',
                value = str(self.inventory.qGrid[2])) 


formactor_action_prefix = 'actor.form-received'


def form(): return Form( 'gulpNE' )


# version
__id__ = "$Id$"

# End of file 
