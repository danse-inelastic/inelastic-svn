# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.DBObjectForm import DBObjectForm as base, InputProcessingError
from vnf.components.Actor import action_link, actionRequireAuthentication


class Form( base ):

    class Inventory( base.Inventory ):
        import pyre.inventory
        temperature = pyre.inventory.str(
            name = 'temperature', default = 300. )
        temperature.meta['label'] = 'Temperature'
        temperature.meta['tip'] = (
            'Please input the temperature in the sample environment. unit: K'
            )

        pressure = pyre.inventory.str(
            name = 'pressure', default = 1. )
        pressure.meta['label'] = 'Pressure'
        pressure.meta['tip'] = (
            'Please input the pressure in the sample environment. unit: atm'
            )

        magnetic_field = pyre.inventory.str(
            name = 'magnetic_field', default = 0 )
        magnetic_field.meta['label'] = 'Magnetic field'
        magnetic_field.meta['tip'] = (
            'Please input the magnetic field as a vector',
            'in the sample environment.',
            'unit: Tesla',
            )
        pass # end of Inventory


    DBTable = 'SampleEnvironment'
    parameters = ['temperature', 'pressure', 'magnetic_field']

    def legend(self):
        'return a legend string'
        return 'Sample Environment'


    def expand(self, form, errors = None):
        '''expand an existing form with fields from this component'''

        p = form.paragraph()
        p.text = [
            'The thermondynamic intensive variables T, P, H affect',
            'the structure and dynamics of your sample, and these',
            'varaibles can also alter the scattering processes.',
            'The parameters enterered here will be used by both',
            'the scattering kernel and by multiphonon routines,',
            'for example.',
            ]

        base.expand( self, form )
        return


    def processUserInputs(self):
        'process user inputs and save them to db'

        director = self.director
        clerk = director.clerk
        return


    def __init__(self, name = None):
        if name is None:
            name = 'sample_environment'

        base.__init__(self, name)

        return
    
    pass # end of Form


from vnf.components.misc import empty_id

formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor

def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
