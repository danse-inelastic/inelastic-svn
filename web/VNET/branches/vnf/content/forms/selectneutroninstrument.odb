# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import action_link, actionRequireAuthentication


class Form( base ):

    class Inventory( base.Inventory ):
        import pyre.inventory
        experiment_id = pyre.inventory.str( 'experiment_id' )
        instrument_id = pyre.inventory.str( 'instrument_id' )
        pass # end of Inventory


    def legend(self):
        'return a legend string'
        return 'Select a neutron instrument'


    def expand(self, form):
        '''expand an existing form with fields from this component'''

        experiment_id = self.inventory.experiment_id
        
        director = self.director
        experiment = director.clerk.getNeutronExperiment( experiment_id )
        current_instrument_id = experiment.instrument_id


        p = form.paragraph()
        p.text = [
            'A neutron experiment has to be performed with a neutron instrument.',
            'The following is a list of neutron instruments supported',
            'by this virtual neutron facility.',
            'Please select the instrument where you want to perform',
            'your experiment.',
            ]

        prefix = formactor_action_prefix

        experiment_id_field = form.hidden(
            name = '%s.experiment_id' % prefix, value = self.inventory.experiment_id )
        instruments = director.clerk.indexInstruments()
        instruments = instruments.itervalues()
        instrument_templates = filter(
            lambda instrument: instrument.template, instruments )
        
        entries = [
            (instrument.id,
             '%s (%s)' % (instrument.short_description, instrument.category)
             )
            for instrument in instrument_templates ]
        
        import opal.content
        selector = form.selector(
            id = 'instrument_selector',
            name = '%s.instrument_id' % prefix,
            entries = entries,
            label = 'Instrument',
            selected = current_instrument_id,
            )
        return


    def processUserInputs(self):
        'process user inputs and save them to db'

        director = self.director
        clerk = director.clerk

        #get the selected instrument
        instrument = clerk.getInstrument( self.inventory.instrument_id )
        #retrive the hierarchy
        instrument = clerk.getHierarchy( instrument )
        #make a deep copy
        instrument = clerk.deepcopy( instrument )
        
        experiment_id = self.inventory.experiment_id
        experiment = director.clerk.getNeutronExperiment( experiment_id )

        experiment.instrument_id = instrument.id
        experiment.status = 'instrument selected'
        
        director.clerk.updateRecord( experiment )
        return


    def __init__(self, name = None):
        if name is None:
            name = 'selectneutroninstrument'

        base.__init__(self, name)

        return
    
    pass # end of Form




formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor


def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
