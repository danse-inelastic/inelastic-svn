# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.PyHtmlTable import PyHtmlTable
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        ax = inv.float('ax',default=1.0)
        ay = inv.float('ay',default=0.0)
        az = inv.float('az',default=0.0)
        bx = inv.float('bx',default=0.0)
        by = inv.float('by',default=1.0)
        bz = inv.float('bz',default=0.0)
        cx = inv.float('cx',default=0.0)
        cy = inv.float('cy',default=0.0)
        cz = inv.float('cz',default=1.0)


    def  expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix
        p = form.paragraph()
        p.text = ['''Input the sample parameters''']
        
        name = form.text(id='name', name='name', label='Sample Name')
        name.help = 'An identifying name for this sample.'
        
        
        p = form.paragraph()
        p.text = ['''Import the sample from an online database ...''']
        p.text = ['''<a href="/java/cod2.jnlp">Launch the Crystallography Open Database</a>''']        
        
        p = form.paragraph()
        p.text = ['''... or input lattice parameters a b c, and a list of atomic 
positions in xyz format such as<br> 
Fe   0.0 0.0 0.0<br>
Fe   0.0 0.5 0.5<br>
Fe   0.5 0.5 0.0<br>
...<br>
''']        
        box = form.box()
        ax = box.text(id='ax', name='%s.ax' % prefix, label='a: (x)')        
        ay = box.text(id='ay', name='%s.ay' % prefix, label='(y)')   
        az = box.text(id='az', name='%s.az' % prefix, label='(z)')  
        box = form.box()
        bx = box.text(id='bx', name='%s.bx' % prefix, label='b: (x)')        
        by = box.text(id='by', name='%s.by' % prefix, label='(y)')   
        bz = box.text(id='bz', name='%s.bz' % prefix, label='(z)')  
        box = form.box()
        cx = box.text(id='cx', name='%s.cx' % prefix, label='c: (x)')        
        cy = box.text(id='cy', name='%s.cy' % prefix, label='(y)')   
        cz = box.text(id='cz', name='%s.cz' % prefix, label='(z)')  
        listOfAtoms=form.textarea(id='listOfAtoms', name='%s.listOfAtoms' % prefix, 
                                  label='List of atoms (i.e. H  0.0  0.0  0.5)',rows=20)
#        atomFile = form.file(id='atomFile', name='atomFile', label='Xyz file containing form')
#        atomFile.help = 'Lattice vectors a,b,c should be on comment line in form a_x a_y a_z b_x b_y b_z c_x c_y c_z'
          
        p = form.paragraph()
        p.text=['Input the shape parameters for a flat plate sample ...']
        height = form.text(id='height', name='%s.height' % prefix, label='Height')        
        width = form.text(id='width', name='%s.width' % prefix, label='Width')   
        thickness = form.text(id='thickness', name='%s.thickness' % prefix, label='Thickness')  
          
        p = form.paragraph()
        p.text=['or input the shape parameters for a cylindrical sample.']
        height = form.text(id='height', name='%s.height' % prefix, label='Height')        
        innerRadius = form.text(id='innerRadius', name='%s.innerRadius' % prefix, label='innerRadius') 
        outerRadius = form.text(id='outerRadius', name='%s.outerRadius' % prefix, label='outerRadius')  
          
    def processUserInputs(self):
        'process user input '
        return 

def form(): return Form( 'create_sample_by_hand' )


# version
__id__ = "$Id$"

# End of file 
