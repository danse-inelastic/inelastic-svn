# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.PyHtmlTable import PyHtmlTable
from vnf.components.Actor import actionRequireAuthentication, action_link


class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
#        kernel = inv.str('kernel',default='gulp')
#        kernel.meta['tip'] = 'type of kernel'
        
        selected_kernel_id = inv.str( 'kernel_id' )

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix

        director = self.director
        clerk = director.clerk
        scatterers = clerk.indexScatterers(where='template=True').values()
        scatterers = [ clerk.getHierarchy(scatterer) for scatterer in scatterers]
        samples = scatterers
            
        p = form.paragraph()
        columns = ['short_description','matter.realmatter.chemical_formula', 'matter.realmatter.cartesian_lattice', 
                   'matter.realmatter.atom_symbols','matter.realmatter.fractional_coordinates', 
                   'shape.realshape.short_description', 'shape.realshape.height','shape.realshape.width',
                   'shape.realshape.thickness',]
        columnTitles = ['Select for neutron experiment', 'Sample description','Chemical formula', 'Cartesian lattice', 
                        'Atom symbols', 'Fractional coordinates', 'Shape description', 'Shape height', 'Shape width', 
                        'Shape thickness']

        t=PyHtmlTable(len(samples), len(columnTitles), {'width':'400','border':2})#,'bgcolor':'white'})
        for colNum, col in enumerate(columnTitles):
            t.setc(0,colNum,col)
#        for row in range(numSamples):
#            colNum=0
#            for name in samples[row].getColumnNames():
        for row, sample in enumerate( samples ):
            #first put in the radio button
            selection = "<input type='radio' name='actor.form-received.kernel_id' value="+sample.id+" id='radio'/>"
            t.setc(row+1, 0, selection)
            for colNum, col in enumerate( columns ):
                if col == 'short_description':
                    value = sample.getColumnValue(col)
#                    link = action_link(
#                        actionRequireAuthentication(
#                        'neutronexperimentwizard',
#                        director.sentry,
#                        label = value,
#                        routine = 'create_new_sample'
#                        ),  director.cgihome
#                        )
#                    value = link
                    t.setc(row+1,colNum+1,value)
                    continue
                else:
                    attrs=col.split('.')
                    try:
                        value = getattr(getattr(getattr(sample, attrs[0]),attrs[1]),attrs[2])
                    except:
                        value=''
                    t.setc(row+1,colNum+1,value)
        p.text = [t.return_html()]
        
        p = form.paragraph()
        p.text = [action_link(
        actionRequireAuthentication(
        'neutronexperimentwizard', director.sentry,
        label = 'Add a new sample',
        routine = 'create_new_sample'
        ),  director.cgihome),'<br>']
        

    def processUserInputs(self):
        'process user input '
        return 


#formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor
from vnf.components.DBObjectForm import formactor_action_prefix

def form(): return Form( 'selectkernel' )


# version
__id__ = "$Id$"

# End of file 
