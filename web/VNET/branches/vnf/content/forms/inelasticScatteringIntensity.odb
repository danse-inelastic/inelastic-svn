# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base


class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        typeOfScattering = inv.str('typeOfScattering', default='Incoherent')
        typeOfScattering.validator=inv.choice(['Incoherent', 'Coherent', 'Both'])
        typeOfScattering.meta['tip'] = 'Type of scattering to calculate'
        
        kineticEnergyCutoff = inv.float('kineticEnergyCutoff', default=140.0)
        kineticEnergyCutoff.meta['tip'] = 'Kinetic energy cutoff'
        

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        
        choices=['Incoherent', 'Coherent', 'Both']
        entries=enumerate(choices)
        typeOfScattering = form.selector(id='selector1',
            name = 'inelasticScatteringIntensity.typeOfScattering',
            entries = entries,
            label = 'Type of scattering',
            selected = self.inventory.xcFunctional,
            )
        
        choices=['Incoherent', 'Coherent', 'Both']
        entries=enumerate(choices)
        typeOfScattering = form.selector(id='selector1',
            name = 'inelasticScatteringIntensity.typeOfScattering',
            entries = entries,
            label = 'Type of scattering',
            selected = self.inventory.xcFunctional,
            )
                
        p = form.paragraph()
        p.text = ['Q Values']
        box = form.box()
        qStart = box.text(
            required=True,
            id='qStart', name='%s.firstname' % self.name, label='From',
            value=text
            )        
        
                

                
'''

  <p>Q Values
    <label>
    <input name="textfield" type="text" id="textfield" value="-3.0" />
    </label>
    to 
    <label>
    <input name="textfield2" type="text" id="textfield2" value="10" />
    </label>
    incremented by 
    <label>
    <input name="textfield3" type="text" id="textfield3" value="0.1" />
    </label>
  </p>
  <p>Q Shell Width 
    <label>
    <input name="textfield4" type="text" id="textfield4" value="1.0" />
    </label>
  </p>
  <p><span id="sprytextfield1">
    <label>Vectors per shell
    <input name="text1" type="text" id="text1" value="50" />
    </label>
  </span></p>
  <p><span id="sprytextfield2">
  <label></label>
  </span> <span id="sprytextfield3"></span>
    <label>Units of Q
    <select name="select2" id="select2">
      <option>1/Ang</option>
      <option>1/nm</option>
    </select>
    </label>
  </p>
  <p><span id="sprytextfield4">
    <label>Fourier Transform Window (% Trajectory Length)
    <input name="text3" type="text" id="text3" value="10" />
    </label>
 </span></p>
  <p>
    <label>Number of Frequency Points
    <input name="text2" type="text" id="text2" value="1000" />
    </label>
    </p>'''
        
        
        
        
        prefix = formactor_action_prefix
        name = '%s.%s' % (formactor_action_prefix, 'kernel')
        gulp = form.radio( id= 'radio2', name = name, label = "Gulp", value = 'gulp')
        mmtk = form.radio(id='radio3', name= name, label = "Mmtk Newton's Equations", value = 'mmtk')
        abInitioHarmonic = form.radio(id='radio4', name=name, label = 'AbInitio Energies, Phon Harmonic Motion', value = 'abInitioHarmonic')
        phononDispersions = form.radio(id='radio6', name=name, label = "Phonon Dispersions", value = 'phononDispersions')

    def processUserInputs(self,director):
        'process user input '
        return self.inventory.kernel


#formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor
from vnf.components.DBObjectForm import formactor_action_prefix

def form(): return Form( 'inelasticScatteringIntensity' )


# version
__id__ = "$Id$"

# End of file 
