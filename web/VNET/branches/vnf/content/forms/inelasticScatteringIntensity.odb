# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        typeOfScattering = inv.str('typeOfScattering', default='Incoherent')
        typeOfScattering.validator=inv.choice(['Incoherent', 'Coherent', 'Both'])
        typeOfScattering.meta['tip'] = 'Type of scattering to calculate'
        
        qUnits = inv.str('qUnits', default='Incoherent')
        qUnits.validator=inv.choice(['1/Ang', '1/nm'])
        qUnits.meta['tip'] = 'Units of Q'
        
        qStart = inv.float('qStart', default=-3.0)
        qFinish = inv.float('qFinish', default=10)
        qIncrement = inv.float('qIncrement', default=-3.0)
        vecsPerShell = inv.float('vecsPerShell', default=50)
        

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix
        
        choices=['Incoherent', 'Coherent', 'Both']
        entries=enumerate(choices)
        typeOfScattering = form.selector(id='selector1',
            name = '%s.typeOfScattering' % prefix,
            entries = entries,
            label = 'Type of scattering',
            selected = self.inventory.typeOfScattering,
            )
                
        p = form.paragraph()
        p.text = ['Q Values']
        
        choices=['1/Ang', '1/nm']
        entries=enumerate(choices)
        qUnits = form.selector(id='selector2',
            name = '%s.qUnits' % prefix,
            entries = entries,
            label = 'Units of Q',
            selected = self.inventory.qUnits,
            )
        
        box = form.box()
        qStart = box.text(
            required=True,
            id='qStart', name='%s.qStart' % prefix, label='From',
            value=self.inventory.qStart
            )        
        qFinish = box.text(
            required=True,
            id='qFinish', name='%s.qFinish' % prefix, label='to',
            value=self.inventory.qFinish
            )   
        qIncrement = box.text(
            required=True,
            id='qIncrement', name='%s.qIncrement' % prefix, label='incremented by',
            value=self.inventory.qIncrement
            )   
        vecsPerShell = form.text(
                id = 'vecsPerShell',
                name='%s.vecsPerShell' % prefix,
                label='Q vectors per shell',
                value = self.inventory.short_description)                

                
'''

  <p><span id="sprytextfield4">
    <label>Fourier Transform Window (% Trajectory Length)
    <input name="text3" type="text" id="text3" value="10" />
    </label>
 </span></p>
  <p>
    <label>Number of Frequency Points
    <input name="text2" type="text" id="text2" value="1000" />
    </label>
    </p>'''
        

    def processUserInputs(self,director):
        'process user input '
        return self.inventory.kernel


#formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor
from vnf.components.DBObjectForm import formactor_action_prefix

def form(): return Form( 'inelasticScatteringIntensity' )


# version
__id__ = "$Id$"

# End of file 
