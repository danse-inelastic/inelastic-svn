#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2007  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base

from vnf.components.DBObjectForm import formactor_action_prefix


class Form(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str( 'id', default = '' )
        name = pyre.inventory.str( 'name', default = 'name' )
        server = pyre.inventory.str( 'server', default = 'serverid' )
        numprocessors = pyre.inventory.int( 'numprocessors', default = 1 )


    DBTable = 'Job'


    def __init__(self, name = None):
        if name is None:
            name = 'job'

        base.__init__(self, name)

        return


    def legend(self):
        'return a legend string'
        record = self.getRecord()
        return 'Job %s:' % record.id


    def expand(self, form):
        '''expand an existing form with fields from this component'''
        
        record = self.getRecord()
        
        prefix = formactor_action_prefix        

        # properties of a job

        id_field = form.hidden(
            name = '%s.id' % prefix, value = record.id)

        field = form.text(
            id = 'name',
            name = '%s.name' % prefix,
            label = 'name',
            value = record.jobName )

        director = self.director
        servers = director.clerk.getServers()
        entries = [ (server.id, server.server) for server in servers ]
        ids = [ id for id, server in entries ]

        selected_server = record.server
        if selected_server not in ids: selected_server = entries[0][0]
        
        selector = form.selector(
            id = 'server_selector',
            name = '%s.server' % prefix,
            entries = entries,
            label = 'server',
            selected = selected_server,
            )
        field = form.text(
            id = 'numprocessors',
            name = '%s.numprocessors' % prefix,
            label = 'number of processors',
            value = record.numprocessors,
            )

        return form


    def processUserInputs(self):
        name = self.inventory.name
        server = self.inventory.server
        numprocessors = self.inventory.numprocessors
        
        record = self.getRecord()

        record.jobName = name
        record.server = server
        record.numprocessors = numprocessors

        director = self.director
        director.clerk.updateRecord( record )
        
        return record


    def getRecord(self):
        'get DB record'
        id = self.inventory.id
        director = self.director
        clerk = director.clerk
        return clerk.getRecordByID( self.DBTable, id )



def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
