# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base


class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        gulpHarmonic = inv.bool('gulpHarmonic',default=True)
        #gulpHarmonic.help = 'Gulp Harmonic Motion'
        gulpNE = inv.bool('gulpNE', default = False)
        mmtkNE = inv.bool('mmtkNE', default = False)
    
        vaspPhon = inv.bool('vaspPhon', default = False)
        abinitPhon = inv.bool('abinitPhon', default = False)
        
        phononDispersion = inv.bool('phononDispersion', default = False)

    parameters = ['gulpHarmonic','gulpNE','mmtkNE','vaspPhon','abinitPhon','phononDispersion'] # parameters to edit in the form
    
    def legend(self):
        'return a legend string'
        return 'kernel'

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix
        gulpHarmonic = form.radio( id= 'radio1', name = '%s' % (prefix, ), label = 'Gulp Harmonic', checked = True)
        gulpNE = form.radio( id= 'radio2', name = '%s' % (prefix, ), label = "Gulp Newton's Equation" )
        mmtkNE = form.radio(id='radio3', name='%s' % (prefix, ), label="Mmtk Newton's Equations")
        vaspPhon = form.radio(id='radio4', name='%s' % (prefix, ), label='Vasp Energies, Phon Harmonic Motion')
        abinitPhon = form.radio(id='radio5', name='%s' % (prefix, ), label="AbInit Energies, Phon Harmonic Motion")
        phononDispersions = form.radio(id='radio6', name='%s' % (prefix, ), label="Phonon Dispersions")

    def processUserInputs(self):
        'process user inputs and save them to db'
        choices = self.parameters
        choosed = []
        for choice in choices: 
            value = getattr( self.inventory, choice )
            if value: choosed.append( choice )
            continue
        return choosed[0]




formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor


def form(): return Form( 'selectkernel' )


# version
__id__ = "$Id$"

# End of file 
