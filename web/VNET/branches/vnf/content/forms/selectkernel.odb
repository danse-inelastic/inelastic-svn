# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base


class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        kernel = inv.str('kernel',default='gulpNE')
        kernel.validator=inv.choice(['gulpHarmonic', 'gulpNE', 'mmtkNE', 'abInitioHarmonic', 'phononDispersion'])
        kernel.meta['tip'] = 'type of kernel'

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix
        gulpHarmonic = form.radio( id= 'radio1', name = '%s' % (prefix, ), label = 'Gulp Harmonic', value = 'gulpHarmonic')
        gulpNE = form.radio( id= 'radio2', name = '%s' % (prefix, ), label = "Gulp Newton's Equation", value = 'gulpNE')
        mmtkNE = form.radio(id='radio3', name='%s' % (prefix, ), label = "Mmtk Newton's Equations", value = 'mmtkNE')
        abInitioHarmonic = form.radio(id='radio4', name='%s' % (prefix, ), label = 'AbInitio Energies, Phon Harmonic Motion', value = 'abInitioHarmonic')
        phononDispersions = form.radio(id='radio6', name='%s' % (prefix, ), label = "Phonon Dispersions", value = 'phononDispersions')

    def processUserInputs(self):
        'process user input '
        return self.inventory.kernel
        
#        choices = self.parameters
#        chosen = []
#        for choice in choices: 
#            value = getattr( self.inventory, choice )
#            if value: chosen.append( choice )
#            continue
#        return chosen[0]




formactor_action_prefix = 'selectkernel.kernel' # assumed actor is a form actor


def form(): return Form( 'selectkernel' )


# version
__id__ = "$Id$"

# End of file 
