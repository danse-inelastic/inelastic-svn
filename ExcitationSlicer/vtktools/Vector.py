""" Implementations of vectors

These classes all implements vectors. The following methods should always
be available:

'GetSpace' -- Returns the 'VectorSpace' which the vector exist in.

'GetCoordinates' -- Returns the coordinates of the vector in the basis of the
		   'VectorSpace'. 

Other methods includes:


'SetCoordinates(coordinates=[' *a1* , *a2* , *a3* '])' -- Sets the coordinates
	 of the vector in the basis of the 'VectorSpace'.

'GetCartesianCoordinates' -- Gets the Cartesian coordinates of the vector.

'SetCartesianCoordinates(coordinates=[' *xcoor* , *ycoor* , *zcoor* '])' -- Sets
	 the Cartesian coordinates of the vector.

'SetSpace(space=' *vectorspace* ')' -- Sets the 'VectorSpace' which the vector
				 exist in. Notice that this usually change the 
				 coordinates, since the CartesianCoordinates
				 are kept fixed. 

""" 

from VectorSpaces import TheCartesianSpace
from Numeric import asarray
from Numeric import array

class Vector:
    """Class which represents vectors

	An instance is created using 
	'Vector(coordinates=[' *a1* , *a2* , *a3* '], space=' *vectorspace* ')'
	where *a1* , *a2* , *a3* is the coordinates ( by default '[0,0,0]' ) 
	in the basis of *vectorspace* (by default 'TheCartesianSpace' ).

	Examples:

	*  'Vector()' returns a null vector in 'TheCartesianSpace'
	*  'Vector([1,0,0])'  returns a unit vector in the x direction of
	   'TheCartesianSpace'
        *  'Vector([1,0,0],myspace)' returns a unit vector in the 1.st
	    direction of 'myspace'.
        *  'Vector(space=myspace)' returns a null vector in 'myspace'.
    """

    def __init__(self,coordinates=None,space=None):
	if coordinates is None:
		coordinates=[0,0,0]
        if space==None:
            space=TheCartesianSpace(dimension=len(coordinates))
        self.Space=space
        self.SetCoordinates(coordinates)

    def __repr__(self):
	#ktrchange#
	#return str(self.__class__)+'(coordinates='+repr(self.GetCoordinates())+',space='+repr(self.GetSpace())+')'
	s = 'Vector(coordinates='+str(self.GetCoordinates().tolist())
	if self.GetSpace() is not TheCartesianSpace(dimension=len(self.GetCoordinates())):
		s = s+',space='+repr(self.GetSpace())
	s=s+')'
	return s

    def __str__(self):
	return 'Vector with coordinates '+str(self.GetCoordinates())+\
	       ' in the VectorSpace '+str(self.GetSpace())

    def __mul__(self,other):
	return self.GetSpace().MultiplyVector(self,other)

    def __rmul__(self,other):
	return self.GetSpace().RightMultiplyVector(self,other)

    def __add__(self,other):
	return self.GetSpace().AddVectors(self,other)

    def __sub__(self,other):
	return self.GetSpace().SubtractVectors(self,other)

    def __neg__(self):
	return self.GetSpace().NegVector(self)

    def __pos__(self):
	return self.GetSpace().PosVector(self)

    def GetSpace(self):
	"""Returns the 'VectorSpace' which the vector exist in."""
        return self.Space

    def SetSpace(self,space):
	"""Sets the 'VectorSpace' which the vector exist in. 

	Notice that this usually change the coordinates, since the 
	CartesianCoordinates are kept fixed. """

        if space!=self.GetSpace():
		pos=self.GetCartesianCoordinates()
		self.Space=space
		self.SetCartesianCoordinates(pos)

    def SetCoordinates(self,coordinates):
	"""Sets the coordinates of the vector in the basis of the 'VectorSpace'."""
        self.Coordinates=asarray(coordinates)

    def GetCoordinates(self):
	"""Returns the coordinates of the vector in the basis of the 'VectorSpace'. """
        return self.Coordinates

    def GetCartesianCoordinates(self):
	"""Gets the Cartesian coordinates of the vector."""
        return self.GetSpace().CartesianCoordinatesFromCoordinates(self.GetCoordinates())

    def SetCartesianCoordinates(self,coordinates):
	"""Sets the Cartesian coordinates of the vector."""
        newscaled=self.GetSpace().CoordinatesFromCartesianCoordinates(coordinates)
        self.SetCoordinates(newscaled)
   

    def InnerProduct(self,other):
	"""Inner product with another vector
	
	Returns the inner product generated by the basis.
	"""
	return self.GetSpace().InnerProduct(self,other)


    def Length(self):
	"""Length of vector

	Returns the length of the vector generated by the basis.
	"""
	from Numeric import sqrt
	return sqrt(self.InnerProduct(self))


