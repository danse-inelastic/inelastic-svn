# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import action_link, actionRequireAuthentication


phases = [
    'polycrystal',
    ]

scatterertypes = {
    'polycrystal': 'PolyXtalScatterer',
    }
    

class Form( base ):

    class Inventory( base.Inventory ):
        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '' )
        name = pyre.inventory.str( 'name' )
        phase = pyre.inventory.int( 'phase' )
        pass # end of Inventory


    def legend(self):
        'return a legend string'
        record = self.getRecord()
        return 'Edit %r' % record.short_description


    def expand(self, form):
        '''expand an existing form with fields from this component'''
        
        record = self.getRecord()
        
        prefix = formactor_action_prefix
        
        id_field = form.hidden(
            name = '%s.id' % prefix, value = record.id)
        
        field = form.text(
            id = 'name',
            name='%s.%s' % (prefix, 'short_description'),
            label='Name',
            value = record.short_description)

        phases = self.phases
        entries = enumerate( phases )
        selector = form.selector(
            id = 'phase_selector',
            name = '%s.phase' % prefix,
            entries = entries,
            label = 'Phase',
            selected = phases[0],
            )

        return


    def processUserInputs(self):
        'process user inputs and save them to db'
        
        record = self.getRecord( )
        
        name = self.inventory.name
        record.short_description = name
        
        phase = phases[ self.inventory.phase ]
        scatterertype = scatterertypes[ phase ]
        
        record.type = scatterertype
        
        director = self.director
        factory = eval( 'new_%s' % scatterertype.lower() )
        realscatterer = factory( name, director )
        
        record.reference = realscatterer.id
        return


    def getRecord(self):
        'get DB record'
        id = self.inventory.id
        director = self.director
        clerk = director.clerk
        return clerk.getRecordByID( 'Scatterer', id )


    def __init__(self, name = None):
        if name is None:
            name = 'newscatterer'

        base.__init__(self, name)

        return
    
    pass # end of Form




def new_id( director ):
    #new token
    token = director.idd.token()
    uniquename = '%s-%s-%s' % (token.locator, token.tid, token.date)
    return uniquename


def new_polyxtalscatterer( name, director ):
    from vnf.dom.PolyXtalScatterer import PolyXtalScatterer as factory
    record = factory()

    id = new_id( director )
    record.id = id

    record.short_description = name
    record.creator = director.sentry.username

    import time
    record.date = time.ctime()

    director.clerk.newRecord( record )
    
    return record



formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor


def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
